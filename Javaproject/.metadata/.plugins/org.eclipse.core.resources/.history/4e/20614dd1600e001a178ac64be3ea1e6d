package multiThreading;

class NewThread implements Runnable{
	 String name;
	 Thread thr;
	 boolean suspendFlag;
	 NewThread(String threadname){
		 name =threadname;
		 thr=new Thread(this,name);
		 System.out.println("new thread :"+thr);
		 suspendFlag = false;
		 thr.start();
		  }
	 public void run() {
		 try {
			 for(int i=10; i>0;i--) {
				 System.out.println(name+":"+i);
				 Thread.sleep(200);
				 synchronized(this) {
					 while(suspendFlag) {
						 wait();
					 }
				 }
			 }
			
		} catch (InterruptedException e) {
			// TODO: handle exception
		
			 System.out.println(name+"interrupted");
		 }
		 System.out.println(name +"existing...");
	 }
	 synchronized void mysuspend() {
		 suspendFlag=true;
	 }
	 synchronized void myresume() {
		 suspendFlag = false;
		 notify();
	 }
}
 class SuspendResumeThread {

	public static void main(String[] args) {
		
		NewThread obj1= new NewThread("one");
		NewThread obj2 = new NewThread("two");
		try {
			Thread.sleep(1000);
			obj1.mysuspend();
			System.out.println("suspending thread one...");
			Thread.sleep(1000);
			obj1.myresume();
			System.out.println("Resumming thread one..");
			obj2.mysuspend();
			System.out.println("suspending thread resuming..");
			
			Thread.sleep(1000);
			obj2.myresume();
			System.out.println("resuming thread two..");
			
		} catch (InterruptedException e) {
			// TODO: handle exception
			System.out.println();
		}

		
		// TODO Auto-generated method stub

	}

}
